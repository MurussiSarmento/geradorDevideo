#!/usr/bin/env python3
"""
Verifica√ß√£o r√°pida do sistema ap√≥s melhorias nos logs
"""

import sys
import traceback

def check_imports():
    """Verifica se todas as importa√ß√µes est√£o funcionando"""
    print("üîç Verificando importa√ß√µes...")
    
    try:
        import tkinter as tk
        print("‚úÖ tkinter OK")
        
        import requests
        print("‚úÖ requests OK")
        
        from batch_processor import PromptManager, ThreadPoolManager, ProgressTracker
        print("‚úÖ batch_processor OK")
        
        import config
        print("‚úÖ config OK")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro na importa√ß√£o: {e}")
        traceback.print_exc()
        return False

def check_gerador_video():
    """Verifica se o gerador_video pode ser importado"""
    print("\nüîç Verificando gerador_video.py...")
    
    try:
        from gerador_video import VideoGeneratorApp
        print("‚úÖ VideoGeneratorApp importado com sucesso")
        
        # Testar cria√ß√£o da classe (sem UI)
        import tkinter as tk
        root = tk.Tk()
        root.withdraw()  # Esconder janela
        
        app = VideoGeneratorApp(root)
        print("‚úÖ VideoGeneratorApp criado com sucesso")
        
        # Verificar se tem os m√©todos de log
        if hasattr(app, 'log'):
            print("‚úÖ Sistema de log presente")
            app.log("üß™ Teste de log funcionando")
        
        root.destroy()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no gerador_video: {e}")
        traceback.print_exc()
        return False

def check_config():
    """Verifica configura√ß√µes"""
    print("\nüîç Verificando configura√ß√µes...")
    
    try:
        import config
        
        print(f"‚úÖ UI_UPDATE_INTERVAL: {config.UI_UPDATE_INTERVAL}ms")
        print(f"‚úÖ DEFAULT_MAX_THREADS: {config.DEFAULT_MAX_THREADS}")
        print(f"‚úÖ REQUEST_TIMEOUT: {config.REQUEST_TIMEOUT}s")
        print(f"‚úÖ LOG_TO_FILE: {config.LOG_TO_FILE}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na configura√ß√£o: {e}")
        return False

def main():
    """Executa todas as verifica√ß√µes"""
    print("üöÄ Verifica√ß√£o do Sistema - Gerador de V√≠deo")
    print("=" * 50)
    
    checks = [
        ("Importa√ß√µes", check_imports),
        ("Configura√ß√µes", check_config),
        ("Gerador de V√≠deo", check_gerador_video),
    ]
    
    results = []
    
    for name, check_func in checks:
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå Erro cr√≠tico em {name}: {e}")
            results.append((name, False))
    
    # Resumo
    print("\n" + "=" * 50)
    print("üìä RESUMO DA VERIFICA√á√ÉO")
    print("=" * 50)
    
    all_ok = True
    for name, result in results:
        status = "‚úÖ OK" if result else "‚ùå FALHOU"
        print(f"{name}: {status}")
        if not result:
            all_ok = False
    
    print("\n" + "=" * 50)
    if all_ok:
        print("üéâ SISTEMA FUNCIONANDO PERFEITAMENTE!")
        print("‚úÖ Todas as melhorias de log foram aplicadas com sucesso")
        print("‚úÖ Interface deve estar responsiva")
        print("‚úÖ Pronto para executar: python gerador_video.py")
    else:
        print("‚ö†Ô∏è PROBLEMAS DETECTADOS!")
        print("‚ùå Verifique os erros acima antes de executar")
    
    print("=" * 50)

if __name__ == "__main__":
    main()